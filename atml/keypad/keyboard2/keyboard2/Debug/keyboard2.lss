
keyboard2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064b  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  00000843  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000247  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ea  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z10USART_Initv>:
#define RADDR 0x44

void USART_Init(void)
{
	//Set baud rate
	UBRRL=(uint8_t)UBRRVAL;     //low byte
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);   //high byte
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	80 bd       	out	0x20, r24	; 32
	//Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
	UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|
	(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32
	//Enable Transmitter and Receiver and Interrupt on receive complete
	UCSRB=(1<<RXEN)|(1<<RXCIE)|(1<<RXEN)|(1<<RXCIE);//|(1<<TXEN);
  88:	80 e9       	ldi	r24, 0x90	; 144
  8a:	8a b9       	out	0x0a, r24	; 10
  8c:	08 95       	ret

0000008e <_Z18USART_vReceiveBytev>:
	//enable global interrupts
}
uint8_t USART_vReceiveByte(void)
{
	// Wait until a byte has been received
	while((UCSRA&(1<<RXC)) == 0);
  8e:	5f 9b       	sbis	0x0b, 7	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <_Z18USART_vReceiveBytev>
	// Return received data
	return UDR;
  92:	8c b1       	in	r24, 0x0c	; 12
}
  94:	08 95       	ret

00000096 <__vector_13>:
char strre[50];
ISR(USART_RXC_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	//define variables
	uint8_t raddress, data, chk;//transmitter address
	//receive destination address
//	raddress=USART_vReceiveByte();
	//receive data
	data=USART_vReceiveByte();
  b8:	0e 94 47 00 	call	0x8e	; 0x8e <_Z18USART_vReceiveBytev>
//	chk=USART_vReceiveByte();
	//compare received checksum with calculated
	//PORTB=0xff;
		
		//if transmitter address match
	DDRB=data;
  bc:	87 bb       	out	0x17, r24	; 23
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	bf 91       	pop	r27
  c4:	af 91       	pop	r26
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	7f 91       	pop	r23
  cc:	6f 91       	pop	r22
  ce:	5f 91       	pop	r21
  d0:	4f 91       	pop	r20
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <_Z9Main_Initv>:
void Main_Init(void)
{
	//PORTB|=(1<<0);//LED OFF
	DDRB=0Xff;//define port C pin 0 as output;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23
	//enable global interrupts
	sei();
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <main>:
}


int main(void)
{
	USART_Init();
  e8:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z10USART_Initv>
//	lcd_init();
	Main_Init();
  ec:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z9Main_Initv>
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x8>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
