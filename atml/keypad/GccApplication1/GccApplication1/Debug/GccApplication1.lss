
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069a  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000422  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8Col_initv>:



void Col_init(void)
{
   DDRA = 0xF8;  // bit 0.2 are columns (0 is input)
  6c:	88 ef       	ldi	r24, 0xF8	; 248
  6e:	8a bb       	out	0x1a, r24	; 26
   PORTA = 0x07;  //pullups on these bits 
  70:	87 e0       	ldi	r24, 0x07	; 7
  72:	8b bb       	out	0x1b, r24	; 27
   //very short delay
    asm volatile ("nop");  
  74:	00 00       	nop
    asm volatile ("nop"); 
  76:	00 00       	nop
  78:	08 95       	ret

0000007a <_Z8Row_initv>:
}

void Row_init(void)
{
    DDRA = 0x87;  // bit 3..6 used for rows
  7a:	87 e8       	ldi	r24, 0x87	; 135
  7c:	8a bb       	out	0x1a, r24	; 26
    PORTA = 0x78;  //pullups on these bits 
  7e:	88 e7       	ldi	r24, 0x78	; 120
  80:	8b bb       	out	0x1b, r24	; 27
    asm volatile ("nop");
  82:	00 00       	nop
    asm volatile ("nop");
  84:	00 00       	nop
  86:	08 95       	ret

00000088 <_Z8Read_keyv>:

}

unsigned char Read_key(void)
{  
  88:	cf 93       	push	r28
  unsigned char value;			
  
  Col_init();      //set up columns to read
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8Col_initv>
 
   value =0;       // init value
  		// read columns first - 0 if key in that column pressed
       if (!(PINA & 0x01)) 
  8e:	c8 9b       	sbis	0x19, 0	; 25
  90:	09 c0       	rjmp	.+18     	; 0xa4 <_Z8Read_keyv+0x1c>
			    {value = 3; }// Col2 = bit0 is low
       else if (!(PINA & 0x02)) 
  92:	c9 9b       	sbis	0x19, 1	; 25
  94:	09 c0       	rjmp	.+18     	; 0xa8 <_Z8Read_keyv+0x20>
			    {value = 2;}   // Col1 = bit1 is low
       else if (!(PINA & 0x04)) 
  96:	c9 b3       	in	r28, 0x19	; 25
  Col_init();      //set up columns to read
 
   value =0;       // init value
  		// read columns first - 0 if key in that column pressed
       if (!(PINA & 0x01)) 
			    {value = 3; }// Col2 = bit0 is low
  98:	c2 fb       	bst	r28, 2
  9a:	cc 27       	eor	r28, r28
  9c:	c0 f9       	bld	r28, 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	c8 27       	eor	r28, r24
  a2:	03 c0       	rjmp	.+6      	; 0xaa <_Z8Read_keyv+0x22>
  a4:	c3 e0       	ldi	r28, 0x03	; 3
  a6:	01 c0       	rjmp	.+2      	; 0xaa <_Z8Read_keyv+0x22>
       else if (!(PINA & 0x02)) 
			    {value = 2;}   // Col1 = bit1 is low
  a8:	c2 e0       	ldi	r28, 0x02	; 2
       else if (!(PINA & 0x04)) 
			    {value = 1; }	// Col0 = bit2 is low 

       Row_init();   //set up rows to read
  aa:	0e 94 3d 00 	call	0x7a	; 0x7a <_Z8Row_initv>
				
						
       if (!(PINA & 0x08)) 
  ae:	cb 99       	sbic	0x19, 3	; 25
  b0:	04 c0       	rjmp	.+8      	; 0xba <_Z8Read_keyv+0x32>
			    {	PORTD=0xf0;
  b2:	80 ef       	ldi	r24, 0xF0	; 240
  b4:	82 bb       	out	0x12, r24	; 18
					value += 0x09; }
  b6:	c7 5f       	subi	r28, 0xF7	; 247
  b8:	09 c0       	rjmp	.+18     	; 0xcc <_Z8Read_keyv+0x44>
       else if (!(PINA & 0x10)) 
  ba:	cc 99       	sbic	0x19, 4	; 25
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <_Z8Read_keyv+0x3a>
			    { value += 0x08; } //row2 = bit 4 is low
  be:	c8 5f       	subi	r28, 0xF8	; 248
  c0:	05 c0       	rjmp	.+10     	; 0xcc <_Z8Read_keyv+0x44>
       else if (!(PINA & 0x20)) 
  c2:	cd 99       	sbic	0x19, 5	; 25
  c4:	02 c0       	rjmp	.+4      	; 0xca <_Z8Read_keyv+0x42>
			    { value += 0x03; } // row1 = bit 5 is low
  c6:	cd 5f       	subi	r28, 0xFD	; 253
  c8:	01 c0       	rjmp	.+2      	; 0xcc <_Z8Read_keyv+0x44>
       else if (!(PINA & 0x40)) 
  ca:	89 b3       	in	r24, 0x19	; 25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	80 e7       	ldi	r24, 0x70	; 112
  d0:	92 e0       	ldi	r25, 0x02	; 2
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <_Z8Read_keyv+0x4a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z8Read_keyv+0x54>
  dc:	00 00       	nop
			    { value += 0x00; } //row0 = bit 6 is low      
	    
	   _delay_ms(100); // switch debounce 
	   Col_init();
  de:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8Col_initv>
	   return value;  // value is sum of row and column   
}
  e2:	8c 2f       	mov	r24, r28
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <main>:
{    
	unsigned char  led;
	    
    
	  led = 0x00;      // init variable
	  Col_init();      // set keypad column read
  e8:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8Col_initv>
		DDRC=0xff;DDRD=0xff;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
  f0:	81 bb       	out	0x11, r24	; 17
		PORTC=0x00;PORTD=0x00;
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	12 ba       	out	0x12, r1	; 18
			if (led==0x06) PORTC=0x06;;
			if (led==0x07) PORTC=0x07;
			if (led==0x08) PORTC=0x08;
			if (led==0x09) PORTC=0x09;
			if (led==0x0a) PORTC=0x0a;
			if (led==0x0b) PORTC=0x0b;;
  f6:	0f 2e       	mov	r0, r31
  f8:	fb e0       	ldi	r31, 0x0B	; 11
  fa:	9f 2e       	mov	r9, r31
  fc:	f0 2d       	mov	r31, r0
			if (led==0x05) PORTC=0x05;;
			if (led==0x06) PORTC=0x06;;
			if (led==0x07) PORTC=0x07;
			if (led==0x08) PORTC=0x08;
			if (led==0x09) PORTC=0x09;
			if (led==0x0a) PORTC=0x0a;
  fe:	0f 2e       	mov	r0, r31
 100:	fa e0       	ldi	r31, 0x0A	; 10
 102:	af 2e       	mov	r10, r31
 104:	f0 2d       	mov	r31, r0
			if (led==0x04) PORTC=0x04;
			if (led==0x05) PORTC=0x05;;
			if (led==0x06) PORTC=0x06;;
			if (led==0x07) PORTC=0x07;
			if (led==0x08) PORTC=0x08;
			if (led==0x09) PORTC=0x09;
 106:	0f 2e       	mov	r0, r31
 108:	f9 e0       	ldi	r31, 0x09	; 9
 10a:	bf 2e       	mov	r11, r31
 10c:	f0 2d       	mov	r31, r0
			if (led==0x03) PORTC=0x03;
			if (led==0x04) PORTC=0x04;
			if (led==0x05) PORTC=0x05;;
			if (led==0x06) PORTC=0x06;;
			if (led==0x07) PORTC=0x07;
			if (led==0x08) PORTC=0x08;
 10e:	68 94       	set
 110:	cc 24       	eor	r12, r12
 112:	c3 f8       	bld	r12, 3
			if (led==0x02) PORTC=0x02;
			if (led==0x03) PORTC=0x03;
			if (led==0x04) PORTC=0x04;
			if (led==0x05) PORTC=0x05;;
			if (led==0x06) PORTC=0x06;;
			if (led==0x07) PORTC=0x07;
 114:	0f 2e       	mov	r0, r31
 116:	f7 e0       	ldi	r31, 0x07	; 7
 118:	df 2e       	mov	r13, r31
 11a:	f0 2d       	mov	r31, r0
			if (led==0x01) PORTC=0x01;
			if (led==0x02) PORTC=0x02;
			if (led==0x03) PORTC=0x03;
			if (led==0x04) PORTC=0x04;
			if (led==0x05) PORTC=0x05;;
			if (led==0x06) PORTC=0x06;;
 11c:	0f 2e       	mov	r0, r31
 11e:	f6 e0       	ldi	r31, 0x06	; 6
 120:	ef 2e       	mov	r14, r31
 122:	f0 2d       	mov	r31, r0
			led= Read_key();   // read keypad
			if (led==0x01) PORTC=0x01;
			if (led==0x02) PORTC=0x02;
			if (led==0x03) PORTC=0x03;
			if (led==0x04) PORTC=0x04;
			if (led==0x05) PORTC=0x05;;
 124:	0f 2e       	mov	r0, r31
 126:	f5 e0       	ldi	r31, 0x05	; 5
 128:	ff 2e       	mov	r15, r31
 12a:	f0 2d       	mov	r31, r0
	        
			led= Read_key();   // read keypad
			if (led==0x01) PORTC=0x01;
			if (led==0x02) PORTC=0x02;
			if (led==0x03) PORTC=0x03;
			if (led==0x04) PORTC=0x04;
 12c:	04 e0       	ldi	r16, 0x04	; 4
// if a column is pressed bit 0,1 or 2 will go low active 0
	        
			led= Read_key();   // read keypad
			if (led==0x01) PORTC=0x01;
			if (led==0x02) PORTC=0x02;
			if (led==0x03) PORTC=0x03;
 12e:	13 e0       	ldi	r17, 0x03	; 3
	    if (!(PINA == 0x07)) {      
// if a column is pressed bit 0,1 or 2 will go low active 0
	        
			led= Read_key();   // read keypad
			if (led==0x01) PORTC=0x01;
			if (led==0x02) PORTC=0x02;
 130:	d2 e0       	ldi	r29, 0x02	; 2
    {          
	    if (!(PINA == 0x07)) {      
// if a column is pressed bit 0,1 or 2 will go low active 0
	        
			led= Read_key();   // read keypad
			if (led==0x01) PORTC=0x01;
 132:	c1 e0       	ldi	r28, 0x01	; 1
	  Col_init();      // set keypad column read
		DDRC=0xff;DDRD=0xff;
		PORTC=0x00;PORTD=0x00;
    while(1)        // Eternal loop
    {          
	    if (!(PINA == 0x07)) {      
 134:	89 b3       	in	r24, 0x19	; 25
 136:	87 30       	cpi	r24, 0x07	; 7
 138:	e9 f3       	breq	.-6      	; 0x134 <main+0x4c>
// if a column is pressed bit 0,1 or 2 will go low active 0
	        
			led= Read_key();   // read keypad
 13a:	0e 94 44 00 	call	0x88	; 0x88 <_Z8Read_keyv>
			if (led==0x01) PORTC=0x01;
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	11 f4       	brne	.+4      	; 0x146 <main+0x5e>
 142:	c5 bb       	out	0x15, r28	; 21
 144:	08 c0       	rjmp	.+16     	; 0x156 <main+0x6e>
			if (led==0x02) PORTC=0x02;
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	11 f4       	brne	.+4      	; 0x14e <main+0x66>
 14a:	d5 bb       	out	0x15, r29	; 21
 14c:	08 c0       	rjmp	.+16     	; 0x15e <main+0x76>
			if (led==0x03) PORTC=0x03;
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	11 f4       	brne	.+4      	; 0x156 <main+0x6e>
 152:	15 bb       	out	0x15, r17	; 21
 154:	08 c0       	rjmp	.+16     	; 0x166 <main+0x7e>
			if (led==0x04) PORTC=0x04;
 156:	84 30       	cpi	r24, 0x04	; 4
 158:	11 f4       	brne	.+4      	; 0x15e <main+0x76>
 15a:	05 bb       	out	0x15, r16	; 21
 15c:	08 c0       	rjmp	.+16     	; 0x16e <main+0x86>
			if (led==0x05) PORTC=0x05;;
 15e:	85 30       	cpi	r24, 0x05	; 5
 160:	11 f4       	brne	.+4      	; 0x166 <main+0x7e>
 162:	f5 ba       	out	0x15, r15	; 21
 164:	08 c0       	rjmp	.+16     	; 0x176 <main+0x8e>
			if (led==0x06) PORTC=0x06;;
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	11 f4       	brne	.+4      	; 0x16e <main+0x86>
 16a:	e5 ba       	out	0x15, r14	; 21
 16c:	08 c0       	rjmp	.+16     	; 0x17e <main+0x96>
			if (led==0x07) PORTC=0x07;
 16e:	87 30       	cpi	r24, 0x07	; 7
 170:	11 f4       	brne	.+4      	; 0x176 <main+0x8e>
 172:	d5 ba       	out	0x15, r13	; 21
 174:	08 c0       	rjmp	.+16     	; 0x186 <main+0x9e>
			if (led==0x08) PORTC=0x08;
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	11 f4       	brne	.+4      	; 0x17e <main+0x96>
 17a:	c5 ba       	out	0x15, r12	; 21
 17c:	08 c0       	rjmp	.+16     	; 0x18e <main+0xa6>
			if (led==0x09) PORTC=0x09;
 17e:	89 30       	cpi	r24, 0x09	; 9
 180:	11 f4       	brne	.+4      	; 0x186 <main+0x9e>
 182:	b5 ba       	out	0x15, r11	; 21
 184:	08 c0       	rjmp	.+16     	; 0x196 <main+0xae>
			if (led==0x0a) PORTC=0x0a;
 186:	8a 30       	cpi	r24, 0x0A	; 10
 188:	11 f4       	brne	.+4      	; 0x18e <main+0xa6>
 18a:	a5 ba       	out	0x15, r10	; 21
 18c:	d3 cf       	rjmp	.-90     	; 0x134 <main+0x4c>
			if (led==0x0b) PORTC=0x0b;;
 18e:	8b 30       	cpi	r24, 0x0B	; 11
 190:	11 f4       	brne	.+4      	; 0x196 <main+0xae>
 192:	95 ba       	out	0x15, r9	; 21
 194:	cf cf       	rjmp	.-98     	; 0x134 <main+0x4c>
			if (led==0x0c) PORTC=0x0c;;
 196:	8c 30       	cpi	r24, 0x0C	; 12
 198:	69 f6       	brne	.-102    	; 0x134 <main+0x4c>
 19a:	85 bb       	out	0x15, r24	; 21
 19c:	c7 cf       	rjmp	.-114    	; 0x12c <main+0x44>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
