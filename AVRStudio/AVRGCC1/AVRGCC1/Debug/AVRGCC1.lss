
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000042  00800060  00800060  00000324  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000e9  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000406  00000000  00000000  00000ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000265  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000555  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ad  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000148  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000006e  00000000  00000000  00001b31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 3a       	cpi	r26, 0xA2	; 162
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  74:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <USART_Init>:
#define LEDOFF 0x22//LED off command

void USART_Init(void)
{
    //Set baud rate
    UBRRL=(uint8_t)UBRRVAL;     //low byte
  7c:	8f e9       	ldi	r24, 0x9F	; 159
  7e:	89 b9       	out	0x09, r24	; 9
    UBRRH=(UBRRVAL>>8);   //high byte
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	80 bd       	out	0x20, r24	; 32
    //Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
    UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32
        (0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0); 
    //Enable Transmitter and Receiver and Interrupt on receive complete
    UCSRB=(1<<RXEN)|(1<<RXCIE);//|(1<<TXEN);
  88:	80 e9       	ldi	r24, 0x90	; 144
  8a:	8a b9       	out	0x0a, r24	; 10
    //enable global interrupts
}
  8c:	08 95       	ret

0000008e <USART_vReceiveByte>:

uint8_t USART_vReceiveByte(void)
{
    // Wait until a byte has been received
    while((UCSRA&(1<<RXC)) == 0);
  8e:	5f 9b       	sbis	0x0b, 7	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <USART_vReceiveByte>
    // Return received data
    return UDR;
  92:	8c b1       	in	r24, 0x0c	; 12
}
  94:	08 95       	ret

00000096 <__vector_13>:

ISR(USART_RXC_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	2f 93       	push	r18
  a6:	3f 93       	push	r19
  a8:	4f 93       	push	r20
  aa:	5f 93       	push	r21
  ac:	6f 93       	push	r22
  ae:	7f 93       	push	r23
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
    //define variables
    uint8_t raddress, data, chk;//transmitter address
    //receive destination address
    raddress=USART_vReceiveByte();
  bc:	0e 94 47 00 	call	0x8e	; 0x8e <USART_vReceiveByte>
  c0:	18 2f       	mov	r17, r24
    //receive data
    data=USART_vReceiveByte();
  c2:	0e 94 47 00 	call	0x8e	; 0x8e <USART_vReceiveByte>
  c6:	08 2f       	mov	r16, r24
    //receive checksum
    chk=USART_vReceiveByte();
  c8:	0e 94 47 00 	call	0x8e	; 0x8e <USART_vReceiveByte>
    //compare received checksum with calculated
	PORTC=0xff;
  cc:	9f ef       	ldi	r25, 0xFF	; 255
  ce:	95 bb       	out	0x15, r25	; 21
    if(chk==(raddress+data))//if match perform operations
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	21 2f       	mov	r18, r17
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	20 0f       	add	r18, r16
  d8:	31 1d       	adc	r19, r1
  da:	82 17       	cp	r24, r18
  dc:	93 07       	cpc	r25, r19
  de:	e9 f4       	brne	.+58     	; 0x11a <__vector_13+0x84>
    {
		PORTC=0x00;
  e0:	15 ba       	out	0x15, r1	; 21
        //if transmitter address match
        if(raddress==RADDR)
  e2:	14 34       	cpi	r17, 0x44	; 68
  e4:	d1 f4       	brne	.+52     	; 0x11a <__vector_13+0x84>
            {
                if(data==LEDON)
  e6:	01 31       	cpi	r16, 0x11	; 17
  e8:	19 f4       	brne	.+6      	; 0xf0 <__vector_13+0x5a>
                    {
                        PORTC=(1<<0);//LED ON
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	15 c0       	rjmp	.+42     	; 0x11a <__vector_13+0x84>
                    }
                else if(data==LEDOFF)
  f0:	02 32       	cpi	r16, 0x22	; 34
  f2:	19 f4       	brne	.+6      	; 0xfa <__vector_13+0x64>
                    {
                        PORTC=(1<<1);//LED OFF
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	10 c0       	rjmp	.+32     	; 0x11a <__vector_13+0x84>
                    }
                else
                {
                    //blink led as error
                    PORTC=(1<<0);//LED OFF
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	8f e1       	ldi	r24, 0x1F	; 31
 100:	9e e4       	ldi	r25, 0x4E	; 78
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <__vector_13+0x6c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_13+0x72>
 108:	00 00       	nop
                    _delay_ms(10);
                    PORTC=~(1<<1);//LED ON   
 10a:	8d ef       	ldi	r24, 0xFD	; 253
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	8f e1       	ldi	r24, 0x1F	; 31
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <__vector_13+0x7c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__vector_13+0x82>
 118:	00 00       	nop
					_delay_ms(10);
                    
                }
            }
    }
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <Main_Init>:
void Main_Init(void)
{
    //PORTC|=(1<<0);//LED OFF
    DDRC=0Xff;//define port C pin 0 as output;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	84 bb       	out	0x14, r24	; 20
    //enable global interrupts
    sei();
 144:	78 94       	sei
}
 146:	08 95       	ret

00000148 <main>:
int main(void)
{
    Main_Init();
 148:	0e 94 a0 00 	call	0x140	; 0x140 <Main_Init>
    USART_Init();
 14c:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_Init>
 150:	ff cf       	rjmp	.-2      	; 0x150 <main+0x8>

00000152 <USARTInit>:


void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	20 93 61 00 	sts	0x0061, r18
 158:	20 91 61 00 	lds	r18, 0x0061
 15c:	20 93 60 00 	sts	0x0060, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
 160:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
 162:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
 164:	86 e8       	ldi	r24, 0x86	; 134
 166:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<TXEN);
 168:	88 e8       	ldi	r24, 0x88	; 136
 16a:	8a b9       	out	0x0a, r24	; 10
	sei();
 16c:	78 94       	sei

}
 16e:	08 95       	ret

00000170 <abc>:
//The USART ISR
//ISR(USART_RXC_VECT)
void abc()
{
	//Read the data
	char data=UDR;
 170:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 172:	80 91 61 00 	lds	r24, 0x0061
 176:	8f 33       	cpi	r24, 0x3F	; 63
 178:	21 f4       	brne	.+8      	; 0x182 <abc+0x12>
 17a:	80 91 60 00 	lds	r24, 0x0060
 17e:	88 23       	and	r24, r24
 180:	79 f0       	breq	.+30     	; 0x1a0 <abc+0x30>
 182:	20 91 61 00 	lds	r18, 0x0061
 186:	80 91 60 00 	lds	r24, 0x0060
 18a:	33 27       	eor	r19, r19
 18c:	27 fd       	sbrc	r18, 7
 18e:	30 95       	com	r19
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	99 27       	eor	r25, r25
 196:	87 fd       	sbrc	r24, 7
 198:	90 95       	com	r25
 19a:	28 17       	cp	r18, r24
 19c:	39 07       	cpc	r19, r25
 19e:	59 f4       	brne	.+22     	; 0x1b6 <abc+0x46>
	{
		//Q Full
		UQFront++;
 1a0:	80 91 60 00 	lds	r24, 0x0060
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 60 00 	sts	0x0060, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 1aa:	80 91 60 00 	lds	r24, 0x0060
 1ae:	80 34       	cpi	r24, 0x40	; 64
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <abc+0x46>
 1b2:	10 92 60 00 	sts	0x0060, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 1b6:	80 91 61 00 	lds	r24, 0x0061
 1ba:	8f 33       	cpi	r24, 0x3F	; 63
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <abc+0x54>
		UQEnd=0;
 1be:	10 92 61 00 	sts	0x0061, r1
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <abc+0x5e>
	else
		UQEnd++;
 1c4:	80 91 61 00 	lds	r24, 0x0061
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 61 00 	sts	0x0061, r24


	URBuff[UQEnd]=data;
 1ce:	e0 91 61 00 	lds	r30, 0x0061
 1d2:	ff 27       	eor	r31, r31
 1d4:	e7 fd       	sbrc	r30, 7
 1d6:	f0 95       	com	r31
 1d8:	ee 59       	subi	r30, 0x9E	; 158
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 1de:	80 91 60 00 	lds	r24, 0x0060
 1e2:	8f 3f       	cpi	r24, 0xFF	; 255
 1e4:	11 f4       	brne	.+4      	; 0x1ea <abc+0x7a>
 1e6:	10 92 60 00 	sts	0x0060, r1
 1ea:	08 95       	ret

000001ec <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
 1ec:	80 91 60 00 	lds	r24, 0x0060
 1f0:	8f 3f       	cpi	r24, 0xFF	; 255
 1f2:	11 f1       	breq	.+68     	; 0x238 <UReadData+0x4c>
		return 0;
	
	data=URBuff[UQFront];
 1f4:	e0 91 60 00 	lds	r30, 0x0060
 1f8:	ff 27       	eor	r31, r31
 1fa:	e7 fd       	sbrc	r30, 7
 1fc:	f0 95       	com	r31
 1fe:	ee 59       	subi	r30, 0x9E	; 158
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	80 81       	ld	r24, Z
	
	if(UQFront==UQEnd)
 204:	20 91 60 00 	lds	r18, 0x0060
 208:	90 91 61 00 	lds	r25, 0x0061
 20c:	29 17       	cp	r18, r25
 20e:	41 f4       	brne	.+16     	; 0x220 <UReadData+0x34>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
 210:	9f ef       	ldi	r25, 0xFF	; 255
 212:	90 93 61 00 	sts	0x0061, r25
 216:	90 91 61 00 	lds	r25, 0x0061
 21a:	90 93 60 00 	sts	0x0060, r25
 21e:	08 95       	ret
	}
	else
	{
		UQFront++;
 220:	90 91 60 00 	lds	r25, 0x0060
 224:	9f 5f       	subi	r25, 0xFF	; 255
 226:	90 93 60 00 	sts	0x0060, r25

		if(UQFront==RECEIVE_BUFF_SIZE)
 22a:	90 91 60 00 	lds	r25, 0x0060
 22e:	90 34       	cpi	r25, 0x40	; 64
 230:	21 f4       	brne	.+8      	; 0x23a <UReadData+0x4e>
		UQFront=0;
 232:	10 92 60 00 	sts	0x0060, r1
 236:	08 95       	ret
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
		return 0;
 238:	80 e0       	ldi	r24, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
 23a:	08 95       	ret

0000023c <UWriteData>:

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
 23c:	5d 9b       	sbis	0x0b, 5	; 11
 23e:	fe cf       	rjmp	.-4      	; 0x23c <UWriteData>

	//Now write
	UDR=data;
 240:	8c b9       	out	0x0c, r24	; 12
}
 242:	08 95       	ret

00000244 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 244:	80 91 60 00 	lds	r24, 0x0060
 248:	8f 3f       	cpi	r24, 0xFF	; 255
 24a:	d1 f0       	breq	.+52     	; 0x280 <UDataAvailable+0x3c>
	if(UQFront<UQEnd)
 24c:	90 91 60 00 	lds	r25, 0x0060
 250:	80 91 61 00 	lds	r24, 0x0061
 254:	98 17       	cp	r25, r24
 256:	3c f4       	brge	.+14     	; 0x266 <UDataAvailable+0x22>
		return(UQEnd-UQFront+1);
 258:	80 91 61 00 	lds	r24, 0x0061
 25c:	90 91 60 00 	lds	r25, 0x0060
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	89 1b       	sub	r24, r25
 264:	08 95       	ret
	else if(UQFront>UQEnd)
 266:	90 91 60 00 	lds	r25, 0x0060
 26a:	80 91 61 00 	lds	r24, 0x0061
 26e:	89 17       	cp	r24, r25
 270:	4c f4       	brge	.+18     	; 0x284 <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 272:	80 91 61 00 	lds	r24, 0x0061
 276:	90 91 60 00 	lds	r25, 0x0060
 27a:	8f 5b       	subi	r24, 0xBF	; 191
 27c:	89 1b       	sub	r24, r25
 27e:	08 95       	ret
	UDR=data;
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
 284:	81 e0       	ldi	r24, 0x01	; 1
}
 286:	08 95       	ret

00000288 <UWriteString>:

void UWriteString(char *str)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	ec 01       	movw	r28, r24
	while((*str)!='\0')
 28e:	88 81       	ld	r24, Y
 290:	88 23       	and	r24, r24
 292:	31 f0       	breq	.+12     	; 0x2a0 <UWriteString+0x18>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}

void UWriteString(char *str)
 294:	21 96       	adiw	r28, 0x01	; 1
{
	while((*str)!='\0')
	{
		UWriteData(*str);
 296:	0e 94 1e 01 	call	0x23c	; 0x23c <UWriteData>
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
 29a:	89 91       	ld	r24, Y+
 29c:	88 23       	and	r24, r24
 29e:	d9 f7       	brne	.-10     	; 0x296 <UWriteString+0xe>
	{
		UWriteData(*str);
		str++;
	}

	UWriteData('\0');
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 1e 01 	call	0x23c	; 0x23c <UWriteData>
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
