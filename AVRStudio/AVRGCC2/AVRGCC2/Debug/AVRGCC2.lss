
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001c  00800060  00800060  0000054a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000a6  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cc  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e6  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067b  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e1  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fb  00000000  00000000  0000205d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000075  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  000024cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_3>
  10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  40:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000054 <unshifted>:
  54:	0d 09 0e 60 15 71 16 31 1a 7a 1b 73 1c 61 1d 77     ...`.q.1.z.s.a.w
  64:	1e 32 21 63 22 78 23 64 24 65 25 34 26 33 29 20     .2!c"x#d$e%4&3) 
  74:	2a 76 2b 66 2c 74 2d 72 2e 35 31 6e 32 62 33 68     *v+f,t-r.51n2b3h
  84:	34 67 35 79 36 36 3a 6d 3b 6a 3c 75 3d 37 3e 38     4g5y66:m;j<u=7>8
  94:	41 2c 42 6b 43 69 44 6f 45 30 46 39 49 2e 4e 2d     A,BkCiDoE0F9I.N-
  a4:	4b 6c 4c 3b 4d 70 52 27 54 5b 55 3d 5a 0d 5b 5d     KlL;MpR'T[U=Z.[]
  b4:	5d 5d 61 3c 66 08 69 31 6b 34 6c 37 70 30 71 2e     ]]a<f.i1k4l7p0q.
  c4:	72 32 73 35 74 36 75 38 76 1b 79 2b 7a 33 7b 2d     r2s5t6u8v.y+z3{-
  d4:	7c 2a 7d 39 00 00                                   |*}9..

000000da <shifted>:
  da:	0d 09 0e 7e 15 51 16 21 1a 5a 1b 53 1c 41 1d 57     ...~.Q.!.Z.S.A.W
  ea:	1e 40 21 43 22 58 23 44 24 45 25 24 26 23 29 20     .@!C"X#D$E%$&#) 
  fa:	2a 56 2b 46 2c 54 2d 52 2e 25 31 4e 32 42 33 48     *V+F,T-R.%1N2B3H
 10a:	34 47 35 59 36 5e 39 4c 3a 4d 3b 4a 3c 55 3d 26     4G5Y6^9L:M;J<U=&
 11a:	3e 2a 41 3c 42 4b 43 49 44 4f 45 29 46 28 49 3e     >*A<BKCIDOE)F(I>
 12a:	4e 5f 4b 4c 4c 3a 4d 50 4a 3f 52 22 54 7b 55 2b     N_KLL:MPJ?R"T{U+
 13a:	5a 0d 5b 7d 5d 7c 61 3e 66 08 69 31 6b 34 6c 37     Z.[}]|a>f.i1k4l7
 14a:	70 30 71 2e 72 32 73 35 74 36 75 38 79 2b 7a 33     p0q.r2s5t6u8y+z3
 15a:	7b 2d 7c 2a 7d 39 00 00                             {-|*}9..

00000162 <extended>:
 162:	6c f0 69 f1 71 f1 70 f3 7a f4 7d f5 75 f6 72 f7     l.i.q.p.z.}.u.r.
 172:	6b f8 74 f9 4a fa 14 fb 11 fc 00 00                 k.t.J.......

0000017e <__ctors_end>:
 17e:	11 24       	eor	r1, r1
 180:	1f be       	out	0x3f, r1	; 63
 182:	cf e5       	ldi	r28, 0x5F	; 95
 184:	d8 e0       	ldi	r29, 0x08	; 8
 186:	de bf       	out	0x3e, r29	; 62
 188:	cd bf       	out	0x3d, r28	; 61

0000018a <__do_clear_bss>:
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	a0 e6       	ldi	r26, 0x60	; 96
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	ac 37       	cpi	r26, 0x7C	; 124
 196:	b1 07       	cpc	r27, r17
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
 19e:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

000001a2 <__bad_interrupt>:
 1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	87 ea       	ldi	r24, 0xA7	; 167
 1a8:	91 e6       	ldi	r25, 0x61	; 97
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x4>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xa>
 1b0:	00 00       	nop

/* initialise lcd and keyboard, enable interrupts */
static void avr_init(void)
{
    
	KbInit();
 1b2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <KbInit>
	sei(); //enable global interrupts
 1b6:	78 94       	sei
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0x12>

000001ba <put_kbbuff>:

} 

static void put_kbbuff(unsigned char c)
{
    if (buffcnt<BUFF_SIZE)                        // If buffer not full
 1ba:	90 91 60 00 	lds	r25, 0x0060
 1be:	90 31       	cpi	r25, 0x10	; 16
 1c0:	c0 f4       	brcc	.+48     	; 0x1f2 <put_kbbuff+0x38>
    {
        *inpt = c;                                // Put character into buffer
 1c2:	e0 91 76 00 	lds	r30, 0x0076
 1c6:	f0 91 77 00 	lds	r31, 0x0077
 1ca:	81 93       	st	Z+, r24
        inpt++;                                    // Increment pointer
 1cc:	f0 93 77 00 	sts	0x0077, r31
 1d0:	e0 93 76 00 	sts	0x0076, r30

        buffcnt++;
 1d4:	80 91 60 00 	lds	r24, 0x0060
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 60 00 	sts	0x0060, r24

        if (inpt >= (kb_buffer + BUFF_SIZE))        // Pointer wrapping
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	e3 37       	cpi	r30, 0x73	; 115
 1e2:	f8 07       	cpc	r31, r24
 1e4:	30 f0       	brcs	.+12     	; 0x1f2 <put_kbbuff+0x38>
            inpt = kb_buffer;
 1e6:	83 e6       	ldi	r24, 0x63	; 99
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 77 00 	sts	0x0077, r25
 1ee:	80 93 76 00 	sts	0x0076, r24
 1f2:	08 95       	ret

000001f4 <KbInit>:
static uint8_t *inpt, *outpt;


void KbInit(void)
{
	buffcnt = 0;
 1f4:	10 92 60 00 	sts	0x0060, r1
	PS2_Init();
 1f8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PS2_Init>
	inpt =  kb_buffer;                        // Initialize buffer
 1fc:	83 e6       	ldi	r24, 0x63	; 99
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 77 00 	sts	0x0077, r25
 204:	80 93 76 00 	sts	0x0076, r24
    outpt = kb_buffer;
 208:	90 93 62 00 	sts	0x0062, r25
 20c:	80 93 61 00 	sts	0x0061, r24
    buffcnt = 0;
 210:	10 92 60 00 	sts	0x0060, r1
}
 214:	08 95       	ret

00000216 <Decode>:
void Decode(unsigned char sc)
{
    static unsigned char is_up = 0, shift = 0, ext=0;
    unsigned char i;

    if (!is_up)                // previous data received was the up-key identifier
 216:	90 91 75 00 	lds	r25, 0x0075
 21a:	99 23       	and	r25, r25
 21c:	09 f0       	breq	.+2      	; 0x220 <Decode+0xa>
 21e:	af c0       	rjmp	.+350    	; 0x37e <Decode+0x168>
    {
        switch (sc)
 220:	89 35       	cpi	r24, 0x59	; 89
 222:	a9 f0       	breq	.+42     	; 0x24e <Decode+0x38>
 224:	8a 35       	cpi	r24, 0x5A	; 90
 226:	18 f4       	brcc	.+6      	; 0x22e <Decode+0x18>
 228:	82 31       	cpi	r24, 0x12	; 18
 22a:	a9 f4       	brne	.+42     	; 0x256 <Decode+0x40>
 22c:	0c c0       	rjmp	.+24     	; 0x246 <Decode+0x30>
 22e:	80 3e       	cpi	r24, 0xE0	; 224
 230:	31 f0       	breq	.+12     	; 0x23e <Decode+0x28>
 232:	80 3f       	cpi	r24, 0xF0	; 240
 234:	81 f4       	brne	.+32     	; 0x256 <Decode+0x40>
        {
          case 0xF0 :        // The up-key identifier
            is_up = 1;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 75 00 	sts	0x0075, r24
            break;
 23c:	08 95       	ret

		  case 0xE0:		//do a lookup of extended keys
			ext = 1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 73 00 	sts	0x0073, r24
			break;
 244:	08 95       	ret
			
          case 0x12 :        // Left SHIFT
            shift = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 74 00 	sts	0x0074, r24
            break;
 24c:	08 95       	ret

          case 0x59 :        // Right SHIFT
            shift = 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 74 00 	sts	0x0074, r24
            break;
 254:	08 95       	ret
          
          default:
			
			if(ext) { //extended key lookup
 256:	90 91 73 00 	lds	r25, 0x0073
 25a:	99 23       	and	r25, r25
 25c:	09 f4       	brne	.+2      	; 0x260 <Decode+0x4a>
 25e:	2e c0       	rjmp	.+92     	; 0x2bc <Decode+0xa6>
			
				for(i = 0; (pgm_read_byte(&extended[i][0])!=sc) && pgm_read_byte(&extended[i][0]); i++) 
 260:	62 e6       	ldi	r22, 0x62	; 98
 262:	71 e0       	ldi	r23, 0x01	; 1
 264:	9b 01       	movw	r18, r22
 266:	fb 01       	movw	r30, r22
 268:	94 91       	lpm	r25, Z+
 26a:	89 17       	cp	r24, r25
 26c:	a1 f0       	breq	.+40     	; 0x296 <Decode+0x80>
 26e:	94 91       	lpm	r25, Z+
 270:	99 23       	and	r25, r25
 272:	a1 f0       	breq	.+40     	; 0x29c <Decode+0x86>
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9f 5f       	subi	r25, 0xFF	; 255
 278:	49 2f       	mov	r20, r25
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	44 0f       	add	r20, r20
 27e:	55 1f       	adc	r21, r21
 280:	9b 01       	movw	r18, r22
 282:	24 0f       	add	r18, r20
 284:	35 1f       	adc	r19, r21
 286:	f9 01       	movw	r30, r18
 288:	a4 91       	lpm	r26, Z+
 28a:	8a 17       	cp	r24, r26
 28c:	49 f0       	breq	.+18     	; 0x2a0 <Decode+0x8a>
 28e:	a4 91       	lpm	r26, Z+
 290:	aa 23       	and	r26, r26
 292:	89 f7       	brne	.-30     	; 0x276 <Decode+0x60>
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <Decode+0x8a>
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <Decode+0x8a>
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	50 e0       	ldi	r21, 0x00	; 0
					;
				if (pgm_read_byte(&extended[i][0]) == sc) 
 2a0:	f9 01       	movw	r30, r18
 2a2:	24 91       	lpm	r18, Z+
 2a4:	82 17       	cp	r24, r18
 2a6:	09 f0       	breq	.+2      	; 0x2aa <Decode+0x94>
 2a8:	78 c0       	rjmp	.+240    	; 0x39a <Decode+0x184>
					//ext_char = pgm_read_byte(&extended[i][1]);
					put_kbbuff(pgm_read_byte(&extended[i][1]));
 2aa:	4f 5f       	subi	r20, 0xFF	; 255
 2ac:	5f 4f       	sbci	r21, 0xFF	; 255
 2ae:	64 0f       	add	r22, r20
 2b0:	75 1f       	adc	r23, r21
 2b2:	fb 01       	movw	r30, r22
 2b4:	84 91       	lpm	r24, Z+
 2b6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <put_kbbuff>
 2ba:	08 95       	ret
			}
			else {
			
				if(!shift)           // If shift not pressed, do a table look-up
 2bc:	90 91 74 00 	lds	r25, 0x0074
 2c0:	99 23       	and	r25, r25
 2c2:	79 f0       	breq	.+30     	; 0x2e2 <Decode+0xcc>
							put_kbbuff(pgm_read_byte(&unshifted[i][1]));
				
				} 
				else {               // If shift pressed

						for(i = 0; (pgm_read_byte(&shifted[i][0])!=sc) && pgm_read_byte(&shifted[i][0]); i++) 
 2c4:	6a ed       	ldi	r22, 0xDA	; 218
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	9b 01       	movw	r18, r22
 2ca:	fb 01       	movw	r30, r22
 2cc:	94 91       	lpm	r25, Z+
 2ce:	89 17       	cp	r24, r25
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <Decode+0xbe>
 2d2:	46 c0       	rjmp	.+140    	; 0x360 <Decode+0x14a>
 2d4:	94 91       	lpm	r25, Z+
 2d6:	99 23       	and	r25, r25
 2d8:	09 f0       	breq	.+2      	; 0x2dc <Decode+0xc6>
 2da:	31 c0       	rjmp	.+98     	; 0x33e <Decode+0x128>
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	41 c0       	rjmp	.+130    	; 0x364 <Decode+0x14e>
			}
			else {
			
				if(!shift)           // If shift not pressed, do a table look-up
				{                         
						for(i = 0; (pgm_read_byte(&unshifted[i][0])!=sc) && pgm_read_byte(&unshifted[i][0]); i++)
 2e2:	64 e5       	ldi	r22, 0x54	; 84
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	9b 01       	movw	r18, r22
 2e8:	fb 01       	movw	r30, r22
 2ea:	94 91       	lpm	r25, Z+
 2ec:	89 17       	cp	r24, r25
 2ee:	a1 f0       	breq	.+40     	; 0x318 <Decode+0x102>
 2f0:	94 91       	lpm	r25, Z+
 2f2:	99 23       	and	r25, r25
 2f4:	a1 f0       	breq	.+40     	; 0x31e <Decode+0x108>
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	9f 5f       	subi	r25, 0xFF	; 255
 2fa:	49 2f       	mov	r20, r25
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	9b 01       	movw	r18, r22
 304:	24 0f       	add	r18, r20
 306:	35 1f       	adc	r19, r21
 308:	f9 01       	movw	r30, r18
 30a:	a4 91       	lpm	r26, Z+
 30c:	8a 17       	cp	r24, r26
 30e:	49 f0       	breq	.+18     	; 0x322 <Decode+0x10c>
 310:	a4 91       	lpm	r26, Z+
 312:	aa 23       	and	r26, r26
 314:	89 f7       	brne	.-30     	; 0x2f8 <Decode+0xe2>
 316:	05 c0       	rjmp	.+10     	; 0x322 <Decode+0x10c>
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <Decode+0x10c>
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
							;
						if (pgm_read_byte(&unshifted[i][0])== sc) 
 322:	f9 01       	movw	r30, r18
 324:	24 91       	lpm	r18, Z+
 326:	82 17       	cp	r24, r18
 328:	09 f0       	breq	.+2      	; 0x32c <Decode+0x116>
 32a:	37 c0       	rjmp	.+110    	; 0x39a <Decode+0x184>
							put_kbbuff(pgm_read_byte(&unshifted[i][1]));
 32c:	4f 5f       	subi	r20, 0xFF	; 255
 32e:	5f 4f       	sbci	r21, 0xFF	; 255
 330:	64 0f       	add	r22, r20
 332:	75 1f       	adc	r23, r21
 334:	fb 01       	movw	r30, r22
 336:	84 91       	lpm	r24, Z+
 338:	0e 94 dd 00 	call	0x1ba	; 0x1ba <put_kbbuff>
 33c:	08 95       	ret
				
				} 
				else {               // If shift pressed

						for(i = 0; (pgm_read_byte(&shifted[i][0])!=sc) && pgm_read_byte(&shifted[i][0]); i++) 
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	9f 5f       	subi	r25, 0xFF	; 255
 342:	49 2f       	mov	r20, r25
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	9b 01       	movw	r18, r22
 34c:	24 0f       	add	r18, r20
 34e:	35 1f       	adc	r19, r21
 350:	f9 01       	movw	r30, r18
 352:	a4 91       	lpm	r26, Z+
 354:	8a 17       	cp	r24, r26
 356:	31 f0       	breq	.+12     	; 0x364 <Decode+0x14e>
 358:	a4 91       	lpm	r26, Z+
 35a:	aa 23       	and	r26, r26
 35c:	89 f7       	brne	.-30     	; 0x340 <Decode+0x12a>
 35e:	02 c0       	rjmp	.+4      	; 0x364 <Decode+0x14e>
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	50 e0       	ldi	r21, 0x00	; 0
							;
						if (pgm_read_byte(&shifted[i][0])== sc)
 364:	f9 01       	movw	r30, r18
 366:	24 91       	lpm	r18, Z+
 368:	82 17       	cp	r24, r18
 36a:	b9 f4       	brne	.+46     	; 0x39a <Decode+0x184>
							put_kbbuff(pgm_read_byte(&shifted[i][1]));
 36c:	4f 5f       	subi	r20, 0xFF	; 255
 36e:	5f 4f       	sbci	r21, 0xFF	; 255
 370:	64 0f       	add	r22, r20
 372:	75 1f       	adc	r23, r21
 374:	fb 01       	movw	r30, r22
 376:	84 91       	lpm	r24, Z+
 378:	0e 94 dd 00 	call	0x1ba	; 0x1ba <put_kbbuff>
 37c:	08 95       	ret
		
    } 
	
	else {			// is_up = 1
        
		is_up = 0;  // Two 0xF0 in a row not allowed
 37e:	10 92 75 00 	sts	0x0075, r1
		ext=0;                          
 382:	10 92 73 00 	sts	0x0073, r1
        switch (sc)
 386:	82 31       	cpi	r24, 0x12	; 18
 388:	19 f0       	breq	.+6      	; 0x390 <Decode+0x17a>
 38a:	89 35       	cpi	r24, 0x59	; 89
 38c:	31 f4       	brne	.+12     	; 0x39a <Decode+0x184>
 38e:	03 c0       	rjmp	.+6      	; 0x396 <Decode+0x180>
        {
          case 0x12 :                        // Left SHIFT
            shift = 0;
 390:	10 92 74 00 	sts	0x0074, r1
            break;
 394:	08 95       	ret
            
          case 0x59 :                        // Right SHIFT
            shift = 0;
 396:	10 92 74 00 	sts	0x0074, r1
 39a:	08 95       	ret

0000039c <KbGetChar>:


uint8_t KbGetChar(void)
{
    uint8_t byte;
    while(buffcnt == 0);                        // Wait for data
 39c:	80 91 60 00 	lds	r24, 0x0060
 3a0:	88 23       	and	r24, r24
 3a2:	e1 f3       	breq	.-8      	; 0x39c <KbGetChar>

    byte = *outpt;                                // Get byte
 3a4:	e0 91 61 00 	lds	r30, 0x0061
 3a8:	f0 91 62 00 	lds	r31, 0x0062
 3ac:	81 91       	ld	r24, Z+
    outpt++;                                    // Increment pointer
 3ae:	f0 93 62 00 	sts	0x0062, r31
 3b2:	e0 93 61 00 	sts	0x0061, r30

    if ( outpt >= (kb_buffer + BUFF_SIZE) )            // Pointer wrapping
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	e3 37       	cpi	r30, 0x73	; 115
 3ba:	f9 07       	cpc	r31, r25
 3bc:	30 f0       	brcs	.+12     	; 0x3ca <KbGetChar+0x2e>
        outpt = kb_buffer;
 3be:	23 e6       	ldi	r18, 0x63	; 99
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	30 93 62 00 	sts	0x0062, r19
 3c6:	20 93 61 00 	sts	0x0061, r18
    
    buffcnt--;                                    // Decrement buffer count
 3ca:	90 91 60 00 	lds	r25, 0x0060
 3ce:	91 50       	subi	r25, 0x01	; 1
 3d0:	90 93 60 00 	sts	0x0060, r25

    return byte;
	
 3d4:	08 95       	ret

000003d6 <PS2_Init>:
static uint8_t ParityOdd(uint8_t);
extern void Decode(uint8_t);

void PS2_Init(void)
{
	MCUCSR = (0<<ISC2);   // INT2 interrupt on falling edge
 3d6:	14 be       	out	0x34, r1	; 52
	bitcount = 11;
 3d8:	8b e0       	ldi	r24, 0x0B	; 11
 3da:	80 93 79 00 	sts	0x0079, r24
	toDevice = FALSE;
 3de:	10 92 78 00 	sts	0x0078, r1
	//edge = 0;
	GICR |= (1<<INT2); //enable INT2 interrupt on
 3e2:	8b b7       	in	r24, 0x3b	; 59
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	8b bf       	out	0x3b, r24	; 59
	
}	
 3e8:	08 95       	ret

000003ea <__vector_3>:
	
	return par;
}

ISR(INT2_vect)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	static uint8_t byteIn;
	
	if(toDevice == FALSE) {
 40c:	80 91 78 00 	lds	r24, 0x0078
 410:	88 23       	and	r24, r24
 412:	19 f5       	brne	.+70     	; 0x45a <__vector_3+0x70>
	
		if(bitcount>2 && bitcount<11) {
 414:	80 91 79 00 	lds	r24, 0x0079
 418:	83 30       	cpi	r24, 0x03	; 3
 41a:	70 f0       	brcs	.+28     	; 0x438 <__vector_3+0x4e>
 41c:	80 91 79 00 	lds	r24, 0x0079
 420:	8b 30       	cpi	r24, 0x0B	; 11
 422:	50 f4       	brcc	.+20     	; 0x438 <__vector_3+0x4e>
			
			byteIn = (byteIn>>1);
 424:	80 91 7b 00 	lds	r24, 0x007B
 428:	86 95       	lsr	r24
 42a:	80 93 7b 00 	sts	0x007B, r24
			if(PIN_DATA & (1<<DATA_PIN) )
 42e:	b1 9b       	sbis	0x16, 1	; 22
 430:	03 c0       	rjmp	.+6      	; 0x438 <__vector_3+0x4e>
				byteIn |= 0x80;
 432:	80 68       	ori	r24, 0x80	; 128
 434:	80 93 7b 00 	sts	0x007B, r24
		}
		if(--bitcount == 0) {
 438:	80 91 79 00 	lds	r24, 0x0079
 43c:	81 50       	subi	r24, 0x01	; 1
 43e:	80 93 79 00 	sts	0x0079, r24
 442:	80 91 79 00 	lds	r24, 0x0079
 446:	88 23       	and	r24, r24
 448:	99 f5       	brne	.+102    	; 0x4b0 <__vector_3+0xc6>
		
			Decode(byteIn);
 44a:	80 91 7b 00 	lds	r24, 0x007B
 44e:	0e 94 0b 01 	call	0x216	; 0x216 <Decode>
			bitcount = 11;
 452:	8b e0       	ldi	r24, 0x0B	; 11
 454:	80 93 79 00 	sts	0x0079, r24
 458:	2b c0       	rjmp	.+86     	; 0x4b0 <__vector_3+0xc6>
		}
	}
	else {
	
		if(bitcount<8) {
 45a:	80 91 79 00 	lds	r24, 0x0079
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	a8 f4       	brcc	.+42     	; 0x48c <__vector_3+0xa2>
			
			if(bufferOut & (1<<bitcount))
 462:	80 91 7a 00 	lds	r24, 0x007A
 466:	20 91 79 00 	lds	r18, 0x0079
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__vector_3+0x88>
 46e:	95 95       	asr	r25
 470:	87 95       	ror	r24
 472:	2a 95       	dec	r18
 474:	e2 f7       	brpl	.-8      	; 0x46e <__vector_3+0x84>
 476:	80 ff       	sbrs	r24, 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__vector_3+0x94>
				PORT_DATA |= (1<<DATA_PIN);
 47a:	c1 9a       	sbi	0x18, 1	; 24
 47c:	01 c0       	rjmp	.+2      	; 0x480 <__vector_3+0x96>
			else
				PORT_DATA &= ~(1<<DATA_PIN);
 47e:	c1 98       	cbi	0x18, 1	; 24
			bitcount++;
 480:	80 91 79 00 	lds	r24, 0x0079
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	80 93 79 00 	sts	0x0079, r24
 48a:	12 c0       	rjmp	.+36     	; 0x4b0 <__vector_3+0xc6>

		}
		else if(bitcount == 8) {  //send parity
 48c:	80 91 79 00 	lds	r24, 0x0079
 490:	88 30       	cpi	r24, 0x08	; 8
 492:	39 f4       	brne	.+14     	; 0x4a2 <__vector_3+0xb8>
		
			if(parityOut)
				PORT_DATA |= (1<<DATA_PIN);
			else
				PORT_DATA &= ~(1<<DATA_PIN);
 494:	c1 98       	cbi	0x18, 1	; 24
			bitcount++;
 496:	80 91 79 00 	lds	r24, 0x0079
 49a:	8f 5f       	subi	r24, 0xFF	; 255
 49c:	80 93 79 00 	sts	0x0079, r24
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <__vector_3+0xc6>
		}
		else {
			
			DDR_DATA &= ~(1<<DATA_PIN);  
 4a2:	b9 98       	cbi	0x17, 1	; 23
			PORT_DATA &= ~(1<<DATA_PIN); //release DATA
 4a4:	c1 98       	cbi	0x18, 1	; 24
			
			toDevice = FALSE;
 4a6:	10 92 78 00 	sts	0x0078, r1
			bitcount = 11;
 4aa:	8b e0       	ldi	r24, 0x0B	; 11
 4ac:	80 93 79 00 	sts	0x0079, r24
		}
	}
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
